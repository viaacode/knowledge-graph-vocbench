apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    tags: "exec"
    

  name: "vocbench"
  labels:
    app: "vocbench"
objects:
  - kind: ConfigMap
    apiVersion: v1
    metadata:
        
      name: saml-login-${env}.xml
      
      labels:
        app: vocbench
        app.kubernetes.io/component: vocbench-${env}
        app.kubernetes.io/instance: vocbench-${env}
        app.kubernetes.io/part-of: vocbench
        component: vocbench
        
        env: ${env}
    data:
      saml-login.xml: |
        <?xml version="1.0" encoding="UTF-8"?>
        <!-- Replace this EntityDescriptor with your metadata -->
        <EntityDescriptor xmlns="urn:oasis:names:tc:SAML:2.0:metadata">
        </EntityDescriptor>

        
        
  - kind: ConfigMap
    apiVersion: v1
    metadata:
        
      name: saml-login-${env}.properties
      
      labels:
        app: vocbench
        app.kubernetes.io/component: vocbench-${env}
        app.kubernetes.io/instance: vocbench-${env}
        app.kubernetes.io/part-of: vocbench
        component: vocbench
        
        env: ${env}
    data:
      saml-login.properties: |
        # A value between https or http. It is related to the protocol used by the server (service provider) on which VocBench will be deployed.
        saml.scheme=https
        # The name of the service provider (without "http://" and without "/" at the end).
        saml.serverName=example.org
        # The entityID of the Identity Provider. Take this value from metadata file received from the team responsible for registering your instance.
        saml.defaultIDP=entityID
        # The base url of the server (service provider) --> scheme://serverName/contextPath
        saml.entityBaseURL=https://example.org/semanticturkey
        # The url of VocBench
        saml.redirect=https://example.org/vocbench3

  - kind: Service
    apiVersion: v1
    metadata:
      name: "vocbench-${env}"
      namespace: "metadata-mgm"
      labels:
        app: "vocbench"
        app.kubernetes.io/component: "vocbench-${env}"
        app.kubernetes.io/instance: "vocbench-${env}"
        app.kubernetes.io/name: "vocbench"
        app.kubernetes.io/part-of: "vocbench"
        app.openshift.io/runtime: "vocbench"
        app.openshift.io/runtime-version: "${env}"
        env: ${env}
    spec:
      ports:
        - protocol: TCP
          port: ${{svc_port}}
          targetPort: ${{svc_port}}
          name: http
      selector:
        app: "vocbench"
        env: ${env}
      clusterIP:
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: "*"
        alpha.image.policy.openshift.io/resolve-names: '*'
        image.openshift.io/triggers: >-
          [{"from":{"kind":"ImageStreamTag","name":"vocbench:${env}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"vocbench-${env}\")].image"}]
      name: "vocbench-${env}"
      namespace: "metadata-mgm"
      labels:
        app: "vocbench"
        app.kubernetes.io/component: "vocbench-${env}"
        app.kubernetes.io/instance: "vocbench-${env}"
        app.kubernetes.io/name: "vocbench"
        app.kubernetes.io/part-of: "vocbench"
        app.openshift.io/runtime: "vocbench"
        app.openshift.io/runtime-version: ${env}
        env: ${env}
    spec:
      replicas: 0
      selector:
        matchLabels:
          app: "vocbench"
          env: ${env}
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: "vocbench"
            deploymentconfig: "vocbench-${env}"
            env: ${env}
          annotations:
            openshift.io/generated-by: OpenShiftWebConsole
        spec:
          
            
          initContainers:
            - resources: {}
              terminationMessagePath: /dev/termination-log
              name: init-data
              command:
                - /bin/sh
                - '-c'
              securityContext:
                privileged: true
                runAsUser: 0
                readOnlyRootFilesystem: false
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: vocbench-${env}
                  mountPath: /opt/vocbench3/data
              terminationMessagePolicy: File
              image: busybox
              args:
                - 'chmod 755  -R  /opt/vocbench3/ ; chown 100:101 -R  /opt/vocbench3/'
          containers:
            - name: "vocbench-${env}"
              terminationMessagePath: /dev/termination-log
              resources:
                limits:
                  cpu: '${cpu_limit}m'
                  memory: '${memory_limit}Mi'
                requests:
                  cpu: '${cpu_requested}m'
                  memory: '${memory_requested}Mi'
              securityContext:
                privileged: false
                runAsUser: 100
              ports:
                - containerPort: ${{svc_port}}
                  protocol: TCP
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: vocbench-${env}
                  mountPath: /opt/vocbench3/data
                - mountPath: /opt/vocbench3/semanticturkey-${ST_VERSION}/etc/saml-login.properties
                  name: saml-config
                  subPath: saml-login.properties
                - mountPath: /opt/vocbench3/semanticturkey-${ST_VERSION}/etc/saml-login.xml
                  name: saml-config-xml
                  subPath: saml-login.xml
              terminationMessagePolicy: File
                
              image: >-
                image-registry.openshift-image-registry.svc:5000/metadata-mgm/vocbench:${env}
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          volumes:
            - name: vocbench-${env}
              persistentVolumeClaim:
                claimName: vocbench-${env}
            - configMap:
                defaultMode: 509
                name: saml-login-${env}.properties
              name: saml-config
            - configMap:
                defaultMode: 509
                name: saml-login-${env}.xml
              name: saml-config-xml
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600
parameters:
  - name: ST_VERSION
    value: "10.1"
  - name: env
    value: "dev"
  - name: "memory_requested"
    value: "128"
  - name: "memory_limit"
    value: "2048"
  - name: "cpu_requested"
    value: "100"
  - name: "cpu_limit"
    value: "900"
  - name: "svc_port"
    value: "1979"
